// ===== KONSTANTY PRO ANIMACE =====
const TYPING_SPEED = 40;      // Rychlost psan√≠ (ms na znak)
const DELETING_SPEED = 70;    // Rychlost maz√°n√≠ (ms na znak)
const LINE_DELAY = 250;       // Zpo≈ædƒõn√≠ mezi ≈ô√°dky (ms)
const PHRASE_PAUSE = 2000;    // Pauza mezi fr√°zemi (ms)

// ===== TYPEWRITER EFEKT =====
// Rotuj√≠c√≠ typewriter efekt pro hero sekci s v√≠ce vƒõtami
const nameText = "Jan Zatloukal";
const phrases = [
  { text: "Python ¬∑ Flask ¬∑ Django ¬∑ SQL" },    // Backend technologie
  { text: "HTML ¬∑ CSS ¬∑ JavaScript" },          // Frontend technologie  
  { text: "Git & GitHub ¬∑ Deployment" }         // N√°stroje a deployment
];
const nameElem = document.querySelector('#name-text');
const claimElem = document.querySelector('#claim-text');

// Nastavit jm√©no rovnou
nameElem.textContent = nameText;

let phraseIndex = 0;
let charIndex = 0;
let deleting = false;

function typeEffect() {
  const currentPhrase = phrases[phraseIndex].text;
  if (!deleting) {
    claimElem.innerHTML = `<span class="code-style">${currentPhrase.substring(0, charIndex + 1)}</span>`;
    charIndex++;
    if (charIndex === currentPhrase.length) {
      deleting = true;
      setTimeout(typeEffect, PHRASE_PAUSE); // pauza p≈ôed maz√°n√≠m
      return;
    }
  } else {
    claimElem.innerHTML = `<span class="code-style">${currentPhrase.substring(0, charIndex - 1)}</span>`;
    charIndex--;
    if (charIndex === 0) {
      deleting = false;
      phraseIndex = (phraseIndex + 1) % phrases.length;
    }
  }
  setTimeout(typeEffect, deleting ? TYPING_SPEED : DELETING_SPEED);
}

// ===== POMOCN√Å FUNKCE =====
function typeWriterLine(line, element, speed, callback) {
  let charPos = 0;
  function typeChar() {
    if (charPos < line.length) {
      const current = element.textContent.replace(/‚ñå$/, '');
      element.textContent = current + line[charPos] + '‚ñå';
      charPos++;
      setTimeout(typeChar, speed);
    } else {
      element.textContent = element.textContent.replace(/‚ñå$/, '') + '\n';
      if (callback) callback();
    }
  }
  typeChar();
}

// ===== HLAVN√ç TERMIN√ÅL =====
const terminalOutput = document.getElementById("terminal-output");
const demoLines = [
  '>>> python portfolio.py',
  '[INFO]  Naƒç√≠t√°m knihovny... hotovo.',
  '[INFO]  P≈ôipojuji se k datab√°zi n√°pad≈Ø...',
  '[INFO]  Kompiluji ≈æivotn√≠ p≈ô√≠bƒõh...',
  '[INFO]  Spou≈°t√≠m unit testy: 42 pro≈°lo, 0 selhalo ‚úÖ',
  '',
  '[SUCCESS] Aplikace √∫spƒõ≈°nƒõ nasazena! ‚úÖ',
  '[OUTPUT] V√Ωsledek: U≈æivatelsk√° zku≈°enost +100',
  '[OUTPUT] Mission accomplished bez jedin√©ho bugu üêû',
  '[OUTPUT] Varov√°n√≠: p≈ô√≠li≈° mnoho kofeinu zji≈°tƒõno ‚òï',
  '[OUTPUT] Pozn√°mka: Python > v≈°echno ostatn√≠ üêç'
];
const runBtn = document.getElementById("run-terminal");

// --- Terminal animation fix: Only one instance runs at a time ---
let typingTimeout;
let typingInterval;

function runTerminalDemo() {
  clearTimeout(typingTimeout);
  clearInterval(typingInterval);
  terminalOutput.textContent = ''; // v≈ædy √∫plnƒõ ƒçist√Ω start
  runBtn.style.display = "none";

  let lineIndex = 0;

  function typeNextLine() {
    if (lineIndex < demoLines.length) {
      typeWriterLine(demoLines[lineIndex], terminalOutput, TYPING_SPEED, () => {
        lineIndex++;
        setTimeout(typeNextLine, LINE_DELAY);
      });
    }
  }
  typeNextLine();
}

if (runBtn) {
  runBtn.addEventListener("click", runTerminalDemo);
}

// ===== PROJEKTY TERMIN√ÅL =====
const projectsTerminalOutput = document.getElementById("projects-terminal-output");
const runProjectsBtn = document.getElementById("run-projects-terminal");

// N√°hodn√© p≈ô√≠stupov√© hl√°≈°ky pro termin√°l projekt≈Ø
const accessMessages = [
  '[ACCESS GRANTED] Identita ovƒõ≈ôena: Jan Zatloukal. Zahajuji naƒç√≠t√°n√≠...',
  '[SECURITY] Autentizace OK. Otev√≠r√°m projektov√Ω vault.',
  '[OK] Token validn√≠. Stahov√°n√≠ seznamu projekt≈Ø...',
  '[AUTH] Ovƒõ≈ôen√≠ dokonƒçeno ‚Äî spu≈°tƒõn√≠ modulu projects.load()',
  '[SYS] P≈ôihl√°≈°en√≠ potvrzeno. Inicializuji zobrazen√≠ projekt≈Ø.',
  '[TRACE] Identita shodn√°. P≈ôesmƒõrov√°n√≠ do sandboxu projekt≈Ø.',
  '[ROOT] P≈ô√≠stup povolen ‚Äî prob√≠h√° de≈°ifrov√°n√≠ manifestu.',
  '[NET] P≈ôipojeno k repozit√°≈ôi. Parsov√°n√≠ projekt≈Ø...',
  '[DAEMON] Slu≈æba projectsd aktivn√≠. Vykresluji polo≈æky.',
  '[OK] Autorizace: SUCCESS. Z√≠sk√°v√°m metadata projekt≈Ø.',
  '[SEC] Checksum OK ‚Äî obsah bude vystaven.',
  '[BOOT] Projektov√Ω re≈æim: odemƒçeno. P≈ôipravte se na v√Ωpis.'
];

// P≈ô√≠stupov√Ω prompt p≈ôed projekty
const accessPrompt = [
  '>>> run projects.py',
  '[INFO] Pro odemƒçen√≠ projekt≈Ø mus√≠te zn√°t jm√©no autora.',
  '[TIP] Staƒç√≠ opsat cel√© jm√©no z horn√≠ ƒç√°sti str√°nky.',
  '[INPUT] Zadejte cel√© jm√©no:'
];

const projectLines = [
  '[INFO] Naƒç√≠t√°m seznam projekt≈Ø...',
  '[OK] 1) Subly ‚Äì spr√°va p≈ôedplatn√©ho',
  '[OK] 2) Password Manager ‚Äì gener√°tor a spr√°vce hesel',
  '[SUCCESS] Projekty √∫spƒõ≈°nƒõ naƒçteny!'
];

function runProjectsDemo() {
  projectsTerminalOutput.textContent = '';
  runProjectsBtn.style.display = "none";
  showAccessPrompt();
}

function showAccessPrompt() {
  let promptIndex = 0;

  function typePromptLine() {
    if (promptIndex < accessPrompt.length) {
      typeWriterLine(accessPrompt[promptIndex], projectsTerminalOutput, TYPING_SPEED, () => {
        promptIndex++;
        setTimeout(typePromptLine, LINE_DELAY);
      });
    } else {
      validateAccessInput();
    }
  }
  typePromptLine();
}

function validateAccessInput() {
  // Nejprve odstran√≠me p≈ô√≠padn√Ω p≈ôedchoz√≠ input (pro opakovan√© spu≈°tƒõn√≠)
  const prevInput = projectsTerminalOutput.querySelector('input.terminal-input');
  prevInput?.remove();
  const input = document.createElement("input");
  input.type = "text";
  input.placeholder = "Zadejte jm√©no...";
  input.classList.add("terminal-input");
  projectsTerminalOutput.appendChild(input);
  input.focus();

  input.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      const enteredName = input.value.trim();
      input.remove();
      projectsTerminalOutput.textContent += `[USER] ${enteredName}\n`;

      if (enteredName.toLowerCase() === "jan zatloukal") {
        // N√°hodn√° hl√°≈°ka p≈ôed v√Ωpisem projekt≈Ø
        const randomMsg = accessMessages[Math.floor(Math.random() * accessMessages.length)];
        projectsTerminalOutput.textContent += randomMsg + '\n';
        printProjects();
      } else {
        projectsTerminalOutput.textContent += "[ERROR] P≈ô√≠stup zam√≠tnut.\n";
        setTimeout(validateAccessInput, 500);
      }
    }
  });
}

function printProjects() {
  let lineIndex = 0;

  function typeProjectLine() {
    if (lineIndex < projectLines.length) {
      typeWriterLine(projectLines[lineIndex], projectsTerminalOutput, TYPING_SPEED, () => {
        lineIndex++;
        setTimeout(typeProjectLine, LINE_DELAY);
      });
    } else {
      const projectsGrid = document.querySelector('.projects-grid');
      if (projectsGrid) {
        projectsGrid.classList.add('show-projects');
      }
    }
  }
  typeProjectLine();
}

if (runProjectsBtn) {
  runProjectsBtn.addEventListener("click", runProjectsDemo);
}

// ===== Animace na scroll =====
const reveals = document.querySelectorAll('.reveal');
const observer = new IntersectionObserver((entries) => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      const children = entry.target.querySelectorAll('.reveal-item');
      children.forEach((child, index) => {
        setTimeout(() => {
          child.classList.add('visible');
        }, index * 150); // stagger efekt
      });
      observer.unobserve(entry.target);
    }
  });
}, { threshold: 0.1 });

reveals.forEach(reveal => observer.observe(reveal));

document.addEventListener('DOMContentLoaded', () => {
  typeEffect();
  // typeTerminal(); // Animace termin√°lu u≈æ se nespou≈°t√≠ automaticky
});
